package nsu.barysheva;

import org.junit.jupiter.api.Test;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;


class SubstringSearchTest {
    @Test
    void startTest() throws IOException {
        String pattern = "–±—Ä–∞";
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(1, 8));
        ArrayList<Integer> actual = SubstringSearch.find("src/test/resources/input.txt", pattern);
        assertEquals(expected, actual);
    }

    @Test
    void testEmptyArr() throws IOException {
        String pattern = " ";
        ArrayList<Integer> expected = new ArrayList<>();
        ArrayList<Integer> actual = SubstringSearch.find("src/test/resources/input.txt", pattern);
        assertEquals(expected, actual);
    }

    @Test
    void testLargeFile() throws IOException {
        String pattern = "–ê–Ω–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞";
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(2203, 2355, 3692, 5116));
        ArrayList<Integer> actual = SubstringSearch.find("src/test/resources/input1.txt", pattern);
        assertEquals(expected, actual);
    }

    @Test
    void foreingTest() throws IOException {
        String pattern = "Áïå";
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(7, 17));
        ArrayList<Integer> actual = SubstringSearch.find("src/test/resources/input2.txt", pattern);
        assertEquals(expected, actual);
    }

    @Test
    public void testFindSubstringInBigString() throws IOException {
        try (FileWriter writer = new FileWriter("test.txt", true)) {
            writer.write("–∞–±—Ä–∞".repeat(2000000));
        }

        List<Integer> indices = SubstringSearch.find("test.txt", "–±—Ä–∞");

        assertEquals(2000000, indices.size());

        File file = new File("test.txt");
        if (file.exists()) {
            assertTrue(file.delete());
        }
    }

    @Test
    void emojiTest() throws IOException {
        String fileName = "src/test/resources/inputEmoji.txt";
        String pattern = "üòä"; // –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        ArrayList<Integer> expected = new ArrayList<>(Arrays.asList(5, 12, 19)); // –û–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–º–æ–¥–∑–∏ –≤ —Ñ–∞–π–ª–µ

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —ç–º–æ–¥–∑–∏
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {
            writer.write("Helloüòäworldüòäagainüòä!");
        }

        try {
            ArrayList<Integer> actual = SubstringSearch.find(fileName, pattern);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            assertEquals(expected, actual, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —ç–º–æ–¥–∑–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏.");
        } finally {
            // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
            Files.delete(Paths.get(fileName));
        }
    }
}